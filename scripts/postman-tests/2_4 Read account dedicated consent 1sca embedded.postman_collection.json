{
	"info": {
		"_postman_id": "e133d663-bada-4dd1-aeaf-5e1cbfa75e05",
		"name": "2_4 Read account dedicated consent 1sca embedded",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 create consent dedicated",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d82067d6-38d6-47c1-afc8-d96a9652ed62",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Consent Id exists\", () => {",
							"   pm.expect(jsonData).to.have.property('consentId');",
							"});",
							"",
							"pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Start authorisation link exists\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"    ",
							"    var expl = _links.startAuthorisationWithPsuAuthentication;",
							"    var impl = _links.startAuthorisation;",
							"  ",
							"    if (expl === undefined && impl === undefined) {",
							"       pm.expect().fail();",
							"    }",
							"});",
							"",
							"pm.test(\"Consent status is received\", () => {",
							"    pm.expect(jsonData.consentStatus).to.eql('received');",
							"});",
							"",
							"pm.globals.set(\"consent_id\", jsonData.consentId);",
							"pm.globals.set(\"startAuthorisation\", jsonData._links.startAuthorisation);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8f6f0540-140c-4038-988d-e242ef45eb59",
						"exec": [
							"pm.globals.unset(\"consent_id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_single}}"
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"access\": {\n    \"accounts\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"balances\": [\n      {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ],\n    \"transactions\": [\n     {\n        \"currency\": \"EUR\",\n        \"iban\": \"DE80760700240271232400\"\n      }\n    ]\n  },\n  \"combinedServiceIndicator\": true,\n  \"frequencyPerDay\": 15,\n  \"recurringIndicator\": true,\n  \"validUntil\": \"2019-10-10\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/consents",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"consents"
					]
				}
			},
			"response": []
		},
		{
			"name": "2 Start the authorisation process for a consent",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d27d8ddc-62a0-4ec5-9a7b-6f17fe907821",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"const authorisationId = jsonData._links.startAuthorisationWithPsuAuthentication.split('/').pop();",
							"",
							"pm.test(\"Status code is 201\", () => {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Start authorisation link exists\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"    ",
							"    pm.expect(_links).to.have.property('startAuthorisationWithPsuAuthentication');",
							"});",
							"",
							"pm.test(\"Select scaStatus \", () => {",
							"    pm.expect(jsonData).to.have.property('scaStatus');",
							"    const scaStatus = jsonData.scaStatus;",
							"    pm.expect(scaStatus).to.eql('started');",
							"});",
							"",
							"pm.globals.set(\"authorisation_id\", authorisationId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3e6dad57-6160-4fdc-a0ea-786c9ba85e06",
						"exec": [
							"pm.globals.unset(\"authorisation_id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID",
						"value": "{{PSU-Corporate-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID-Type",
						"value": "{{PSU-Corporate-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_single}}"
					},
					{
						"key": "PSU-ID-Type",
						"value": "{{PSU-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"consents",
						"{{consent_id}}",
						"authorisations"
					]
				},
				"description": "Create an authorisation sub-resource and start the authorisation process of a consent.  The message might in addition transmit authentication and authorisation related data.  his method is iterated n times for a n times SCA authorisation in a  corporate context, each creating an own authorisation sub-endpoint for  the corresponding PSU authorising the consent.  The ASPSP might make the usage of this access method unnecessary,  since the related authorisation resource will be automatically created by  the ASPSP after the submission of the consent data with the first POST consents call.  The start authorisation process is a process which is needed for creating a new authorisation  or cancellation sub-resource.   This applies in the following scenarios:    * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding Payment      Initiation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be      uploaded by using the extended forms.     * 'startAuthorisationWithPsuIdentfication',      * 'startAuthorisationWithPsuAuthentication'     * 'startAuthorisationWithAuthentciationMethodSelection'    * The related payment initiation cannot yet be executed since a multilevel SCA is mandated.   * The ASPSP has indicated with an 'startAuthorisation' hyperlink in the preceeding      Payment Cancellation Response that an explicit start of the authorisation process is needed by the TPP.      The 'startAuthorisation' hyperlink can transport more information about data which needs to be uploaded      by using the extended forms as indicated above.   * The related payment cancellation request cannot be applied yet since a multilevel SCA is mandate for      executing the cancellation.   * The signing basket needs to be authorised yet. "
			},
			"response": []
		},
		{
			"name": "3 Update PSU Data for consents",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3bbec509-c1ad-45ae-b7c2-f62787e3399c",
						"exec": [
							"pm.test('Status code is 200', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Sca status is scaMethodSelected', () => {",
							"   pm.expect(jsonData.scaStatus).to.eql('scaMethodSelected');",
							"});",
							"",
							"pm.test(\"Select authoriseTransaction method link exists\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"    pm.expect(_links).to.have.property('authoriseTransaction');",
							"});",
							"",
							"pm.test(\"Select chosenScaMethod exist\", () => {",
							"    pm.expect(jsonData).to.have.property('chosenScaMethod');",
							"    const chosenScaMethod = jsonData.chosenScaMethod;",
							"    ",
							"    /*pm.expect(chosenScaMethod).to.have.property('authenticationType');",
							"    pm.expect(chosenScaMethod.authenticationType).to.eql('SMS_OTP');*/",
							"    ",
							"    pm.expect(chosenScaMethod).to.have.property('authenticationMethodId');",
							"    //pm.expect(chosenScaMethod.authenticationMethodId).to.eql(pm.globals.get(\"authentication_method_id\"));",
							"});",
							"",
							"pm.test(\"Challenge data exist\", () => {",
							"    pm.expect(jsonData).to.have.property('challengeData');",
							"   /* const challengeData = jsonData.challengeData;",
							"    ",
							"    pm.expect(challengeData).to.have.property('data');",
							"    pm.expect(challengeData).to.have.property('imageLink');",
							"    pm.expect(challengeData).to.have.property('otpMaxLength');",
							"    pm.expect(challengeData).to.have.property('additionalInformation');*/",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID",
						"value": "{{PSU-Corporate-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID-Type",
						"value": "{{PSU-Corporate-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_single}}"
					},
					{
						"key": "PSU-ID-Type",
						"value": "{{PSU-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"psuData\": {\n\t\t\"password\": \"{{psu_id_password}}\"\n\t}\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"consents",
						"{{consent_id}}",
						"authorisations",
						"{{authorisation_id}}"
					]
				},
				"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
			},
			"response": []
		},
		{
			"name": "4 Update PSU Data for consents finalization",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e30b6d6-16d6-4b78-a782-0c9caef3ea1a",
						"exec": [
							"pm.test('Status code is 200', () => {",
							"   pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test('Sca status is finalised', () => {",
							"   pm.expect(jsonData.scaStatus).to.eql('finalised');",
							"});",
							"",
							"pm.test(\"Select scaStatus link exists\", () => {",
							"    pm.expect(jsonData).to.have.property('_links');",
							"    const _links = jsonData._links;",
							"    pm.expect(_links).to.have.property('scaStatus');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID",
						"value": "{{PSU-Corporate-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Corporate-ID-Type",
						"value": "{{PSU-Corporate-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-ID",
						"value": "{{psu_id_single}}"
					},
					{
						"key": "PSU-ID-Type",
						"value": "{{PSU-ID-Type}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"scaAuthenticationData\": \"{{tan}}\"\n}"
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/consents/{{consent_id}}/authorisations/{{authorisation_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"consents",
						"{{consent_id}}",
						"authorisations",
						"{{authorisation_id}}"
					]
				},
				"description": "This method update PSU data on the consents  resource if needed.  It may authorise a consent within the Embedded SCA Approach where needed.  Independently from the SCA Approach it supports e.g. the selection of  the authentication method and a non-SCA PSU authentication.  This methods updates PSU data on the cancellation authorisation resource if needed.   There are several possible Update PSU Data requests in the context of a consent request if needed,  which depends on the SCA approach:  * Redirect SCA Approach:   A specific Update PSU Data Request is applicable for      * the selection of authentication methods, before choosing the actual SCA approach. * Decoupled SCA Approach:   A specific Update PSU Data Request is only applicable for   * adding the PSU Identification, if not provided yet in the Payment Initiation Request or the Account Information Consent Request, or if no OAuth2 access token is used, or   * the selection of authentication methods. * Embedded SCA Approach:    The Update PSU Data Request might be used    * to add credentials as a first factor authentication data of the PSU and   * to select the authentication method and   * transaction authorisation.  The SCA Approach might depend on the chosen SCA method.  For that reason, the following possible Update PSU Data request can apply to all SCA approaches:  * Select an SCA method in case of several SCA methods are available for the customer.  There are the following request types on this access path:   * Update PSU Identification   * Update PSU Authentication   * Select PSU Autorization Method      WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change.   * Transaction Authorisation     WARNING: This method need a reduced header,      therefore many optional elements are not present.      Maybe in a later version the access path will change. "
			},
			"response": []
		},
		{
			"name": "5 Read Account List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "88ba13c7-91e5-4e67-8f76-4a26f9455267",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.globals.set(\"account_id_cur\", jsonData.accounts[0].resourceId);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data exists\", () => {",
							"    if (jsonData.accounts.length > 0) {",
							"        const firstAccount = jsonData.accounts[0];",
							"        ",
							"        pm.expect(firstAccount).to.have.property('_links');",
							"        pm.expect(firstAccount._links).to.have.property('viewBalances');",
							"        pm.expect(firstAccount._links).to.have.property('viewTransactions');",
							"        pm.expect(firstAccount).to.have.property('resourceId');",
							"        ",
							"        if (pm.globals.get(\"with_balance\") === \"true\") {",
							"            pm.expect(firstAccount).to.have.property('balances');",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6e2e680d-94a5-4d06-9a7d-3f7d9b3ad8db",
						"exec": [
							"pm.globals.unset(\"account_id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Consent-ID",
						"value": "{{consent_id}}"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts?withBalance={{with_balance}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"accounts"
					],
					"query": [
						{
							"key": "withBalance",
							"value": "{{with_balance}}"
						}
					]
				},
				"description": "Read the identifiers of the available payment account together with  booking balance information, depending on the consent granted.  It is assumed that a consent of the PSU to this access is already given and stored on the ASPSP system.  The addressed list of accounts depends then on the PSU ID and the stored consent addressed by consentId,  respectively the OAuth2 access token.   Returns all identifiers of the accounts, to which an account access has been granted to through  the /consents endpoint by the PSU.  In addition, relevant information about the accounts and hyperlinks to corresponding account  information resources are provided if a related consent has been already granted.  Remark: Note that the /consents endpoint optionally offers to grant an access on all available  payment accounts of a PSU.  In this case, this endpoint will deliver the information about all available payment accounts  of the PSU at this ASPSP. "
			},
			"response": []
		},
		{
			"name": "6 Read Account Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2b8d1c97-da4a-417e-a512-fb62573a1f66",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.globals.set(\"account_id\", jsonData.resourceId);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data exists\", () => {",
							"    if (!(jsonData === null || jsonData.length === 0)) {",
							"        pm.expect(jsonData).to.have.property('_links');",
							"        pm.expect(jsonData._links).to.have.property('viewBalances');",
							"        pm.expect(jsonData._links).to.have.property('viewTransactions');",
							"        pm.expect(jsonData).to.have.property('resourceId');",
							"        ",
							"        if (pm.globals.get(\"with_balance\") === \"true\") {",
							"            pm.expect(jsonData).to.have.property('balances');",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Consent-ID",
						"value": "{{consent_id}}"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_cur}}?withBalance={{with_balance}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{account_id_cur}}"
					],
					"query": [
						{
							"key": "withBalance",
							"value": "{{with_balance}}"
						}
					]
				},
				"description": "Reads details about an account, with balances where required.  It is assumed that a consent of the PSU to  this access is already given and stored on the ASPSP system.  The addressed details of this account depends then on the stored consent addressed by consentId,  respectively the OAuth2 access token.  **NOTE:** The account-id can represent a multicurrency account.  In this case the currency code is set to \"XXX\".  Give detailed information about the addressed account.  Give detailed information about the addressed account together with balance information "
			},
			"response": []
		},
		{
			"name": "7 Read Balance",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fa7bf837-9bf3-46c2-9e9e-57f3f5d17d73",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data exists\", () => {",
							"    if (!(jsonData === null || jsonData.length === 0)) {",
							"        pm.expect(jsonData).to.have.property('account');",
							"        ",
							"        if (pm.globals.get(\"with_balance\") === \"true\") {",
							"            pm.expect(jsonData).to.have.property('balances');",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Consent-ID",
						"value": "{{consent_id}}"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_cur}}/balances",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{account_id_cur}}",
						"balances"
					]
				},
				"description": "Reads account data from a given account addressed by \"account-id\".   **Remark:** This account-id can be a tokenised identification due to data protection reason since the path  information might be logged on intermediary servers within the ASPSP sphere.  This account-id then can be retrieved by the \"GET Account List\" call.  The account-id is constant at least throughout the lifecycle of a given consent. "
			},
			"response": []
		},
		{
			"name": "8 Read Transaction List",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "985b137b-f19c-4855-9b95-6223c94f5134",
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.globals.set(\"resource_id\", jsonData.transactions.booked[0].transactionId);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Data exists\", () => {",
							"    if (!(jsonData === null || jsonData.length === 0)) {",
							"        pm.expect(jsonData).to.have.property('account');",
							"        ",
							"        if (jsonData.transactions !== undefined) {",
							"            const bookingStatus = pm.globals.get(\"booking_status\");",
							"            ",
							"            if (bookingStatus === 'booked') {",
							"                if (jsonData.transactions.pending !== undefined) {",
							"                    pm.expect().fail();",
							"                } ",
							"            }",
							"            ",
							"            if (bookingStatus === 'pending') {",
							"                if (jsonData.transactions.booked !== undefined) {",
							"                    pm.expect().fail();",
							"                } ",
							"            }",
							"        }",
							"        ",
							"        if (pm.globals.get(\"with_balance\") === \"true\") {",
							"            pm.expect(jsonData).to.have.property('balances');",
							"        }",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9f33f550-7718-40a7-baca-d060e7b6e992",
						"exec": [
							"pm.globals.unset(\"resource_id\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Consent-ID",
						"value": "{{consent_id}}"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_cur}}/transactions?bookingStatus={{booking_status}}&dateFrom=2018-01-01&dateTo=&withBalance={{with_balance}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{account_id_cur}}",
						"transactions"
					],
					"query": [
						{
							"key": "bookingStatus",
							"value": "{{booking_status}}"
						},
						{
							"key": "dateFrom",
							"value": "2018-01-01"
						},
						{
							"key": "dateTo",
							"value": ""
						},
						{
							"key": "withBalance",
							"value": "{{with_balance}}"
						}
					]
				},
				"description": "Read transaction reports or transaction lists of a given account adressed by \"account-id\", depending on the steering parameter  \"bookingStatus\" together with balances.  For a given account, additional parameters are e.g. the attributes \"dateFrom\" and \"dateTo\".  The ASPSP might add balance information, if transaction lists without balances are not supported. "
			},
			"response": []
		},
		{
			"name": "9 Read Transaction Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2de9cd45-47a3-44af-a835-e7c3e34a5d9c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"/*pm.test(\"Links exists\", () => {",
							"    if (!(jsonData === null || jsonData.length === 0)) {",
							"        pm.expect(jsonData).to.have.property('_links');",
							"        pm.expect(jsonData._links).to.have.property('viewBalances');",
							"    }",
							"});*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Consent-ID",
						"value": "{{consent_id}}"
					},
					{
						"key": "Digest",
						"value": "{{Digest}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept",
						"value": "{{PSU-Accept}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Charset",
						"value": "{{PSU-Accept-Charset}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Encoding",
						"value": "{{PSU-Accept-Encoding}}",
						"disabled": true
					},
					{
						"key": "PSU-Accept-Language",
						"value": "{{PSU-Accept-Language}}",
						"disabled": true
					},
					{
						"key": "PSU-Device-ID",
						"value": "{{PSU-Device-ID}}",
						"disabled": true
					},
					{
						"key": "PSU-Geo-Location",
						"value": "{{PSU-Geo-Location}}",
						"disabled": true
					},
					{
						"key": "PSU-Http-Method",
						"value": "{{PSU-Http-Method}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Address",
						"value": "{{PSU-IP-Address}}",
						"disabled": true
					},
					{
						"key": "PSU-IP-Port",
						"value": "{{PSU-IP-Port}}",
						"disabled": true
					},
					{
						"key": "PSU-User-Agent",
						"value": "{{PSU-User-Agent}}",
						"disabled": true
					},
					{
						"key": "Signature",
						"value": "{{Signature}}",
						"disabled": true
					},
					{
						"key": "TPP-Signature-Certificate",
						"value": "{{TPP-Signature-Certificate}}",
						"disabled": true
					},
					{
						"key": "X-Request-ID",
						"value": "{{x_request_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{protocol}}://{{url_xs2a}}/v1/accounts/{{account_id_cur}}/transactions/{{resource_id}}",
					"protocol": "{{protocol}}",
					"host": [
						"{{url_xs2a}}"
					],
					"path": [
						"v1",
						"accounts",
						"{{account_id_cur}}",
						"transactions",
						"{{resource_id}}"
					]
				},
				"description": "Reads transaction details from a given transaction addressed by \"resourceId\" on a given account addressed by \"account-id\".  This call is only available on transactions as reported in a JSON format.  **Remark:** Please note that the PATH might be already given in detail by the corresponding entry of the response of the  \"Read Transaction List\" call within the _links subfield. "
			},
			"response": []
		}
	]
}